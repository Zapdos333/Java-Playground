// plugins
apply plugin: 'maven-publish'
apply plugin: 'java'
//project publish
group = 'com.github.Zapdos333'
project.setVersion('2.0.0')
publishing {
	publications {
		maven(MavenPublication) {
			groupId = group
			artifactId = 'Java-Playground'
			version = project.getVersion()
			from components.java
		}
	}
}
publish.dependsOn build
// projects
subprojects {
	apply plugin: 'java'
	project.setVersion(project.getRootProject().getVersion())
	sourceSets.main.java.destinationDirectory = file("${project.getRootDir()}/bin/${project.getName()}")
	buildDir = file("${project.getRootDir()}/build/${project.getName()}")
	compileJava() {}
	jar {
		archiveFileName = "${project.getRootProject().getName()}-${project.getName()}-${project.getVersion()}.jar"
		destinationDirectory.set(file("${project.getRootDir()}/build/libs/"))
		duplicatesStrategy = 'exclude'
	}
	processResources.onlyIf { false }
}
/*
project(':template'){
	sourceSets.main.java.srcDirs=["${project.getRootDir()}/src/java/${project.getName()}"]
	dependencies {}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}
*/
project(':library-general'){
	sourceSets.main.java.srcDirs=["${project.getRootDir()}/src/java/${project.getName()}"]
	dependencies {}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}
project(':library-CClass'){
	sourceSets.main.java.srcDirs=["${project.getRootDir()}/src/java/${project.getName()}"]
	dependencies {
		implementation project(':library-general')
	}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}
project(':library-CoordinateSystem'){
	sourceSets.main.java.srcDirs=["${project.getRootDir()}/src/java/${project.getName()}"]
	dependencies {
		implementation project(':library-CClass')
	}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}
project(':nonLibrary-HelloWorld'){
	sourceSets.main.java.srcDirs=["${project.getRootDir()}/src/java/${project.getName()}"]
	dependencies {}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}
project(':nonLibrary-school'){
	sourceSets.main.java.srcDirs=["${project.getRootDir()}/src/java/${project.getName()}"]
	dependencies {
		implementation project(':library-general')
		implementation project(':library-CClass')
	}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}
project(':nonLibrary-tests'){
	sourceSets.main.java.srcDirs=["${project.getRootDir()}/src/java/${project.getName()}"]
	dependencies {
		implementation project(':library-general')
		implementation project(':library-CClass')
		implementation project(':library-CoordinateSystem')
		implementation project(':nonLibrary-school')
		//implementation project(':nonLibrary-HelloWorld')
	}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}
//dependecy management
dependencies {
	implementation project(':library-general')
	implementation project(':library-CoordinateSystem')
	implementation project(':library-CClass')
	implementation project(':nonLibrary-general')
	implementation project(':nonLibrary-HelloWorld')
	implementation project(':nonLibrary-school')
	implementation project(':nonLibrary-tests')
}
//main jar
jar {
	archiveFileName = "${project.archivesBaseName}-${project.getVersion()}.jar"
	from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	duplicatesStrategy = 'exclude'
	destinationDirectory.set(file("./build/libs"))
}
//secondary jars
project(':library'){
	dependencies {
		implementation project(':library-general')
		implementation project(':library-CClass')
		implementation project(':library-CoordinateSystem')
	}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}
project(':nonLibrary'){
	dependencies {
		implementation project(':nonLibrary-general')
		implementation project(':nonLibrary-HelloWorld')
		implementation project(':nonLibrary-school')
		implementation project(':nonLibrary-tests')
	}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	jar.manifest.attributes("Main-Class": "com.Ace009.nonLibrary.MainMethods")
}
// set main classpath
sourceSets {
	main.java {
		srcDirs=[
			file("./src/java/library-general/"),
			file("./src/java/library-CClass/"),
			file("./src/java/library-CoordinateSystem/"),
			file("./src/java/nonLibrary-HelloWorld/"),
			file("./src/java/nonLibrary-school/"),
			file("./src/java/nonLibrary-tests/")
		]
	}
}
//configure root
compileJava.onlyIf { false }
processResources.onlyIf { false }
buildDir="./build/"
//debug
task printCheck(){
	doLast{
		println(sourceSets.main.java.srcDirs)
	}
}
