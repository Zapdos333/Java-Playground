// plugins
apply plugin: 'java'
//project properties
project.setVersion('3.0.0')
// projects
subprojects {
	apply plugin: 'java'
	project.setVersion(project.getRootProject().getVersion())
	sourceSets.main.java.destinationDirectory = file("${project.getRootDir()}/bin/${project.getName()}")
	buildDir = file("${project.getRootDir()}/build/${project.getName()}")
	compileJava() {}
	jar {
		archiveFileName = "${project.getRootProject().getName()}-${project.getName()}-${project.getVersion()}.jar"
		destinationDirectory.set(file("${project.getRootDir()}/build/libs/"))
		duplicatesStrategy = 'exclude'
	}
	processResources.onlyIf { false }
	javadoc.onlyIf { false }
}
/*
project(':template'){
	sourceSets.main.java.srcDirs=["${project.getRootDir()}/src/java/${project.getName()}"]
	dependencies {}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}
*/
project(':library-general'){
	sourceSets.main.java.srcDirs=["${project.getRootDir()}/src/java/${project.getName()}"]
	dependencies {}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}
project(':library-CClass'){
	sourceSets.main.java.srcDirs=["${project.getRootDir()}/src/java/${project.getName()}"]
	dependencies {
		implementation project(':library-general')
	}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}
project(':library-CoordinateSystem'){
	sourceSets.main.java.srcDirs=["${project.getRootDir()}/src/java/${project.getName()}"]
	dependencies {
		implementation project(':library-CClass')
	}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}
project(':library-Math'){
	sourceSets.main.java.srcDirs=["${project.getRootDir()}/src/java/${project.getName()}"]
	dependencies {
		implementation project(':library-CClass')
	}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}
project(':library'){ //secondary jar
	dependencies {
		implementation project(':library-general')
		implementation project(':library-CClass')
		implementation project(':library-CoordinateSystem')
		implementation project(':library-Math')
	}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}
project(':nonLibrary-HelloWorld'){
	sourceSets.main.java.srcDirs=["${project.getRootDir()}/src/java/${project.getName()}"]
	dependencies {}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}
project(':nonLibrary-school'){
	sourceSets.main.java.srcDirs=["${project.getRootDir()}/src/java/${project.getName()}"]
	dependencies {
		implementation project(':library-general')
		implementation project(':library-CClass')
	}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}
project(':nonLibrary-tests'){
	sourceSets.main.java.srcDirs=["${project.getRootDir()}/src/java/${project.getName()}"]
	dependencies {
		implementation project(':library')
		implementation project(':nonLibrary-school')
	}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}
project(':nonLibrary'){ //secondary jar
	dependencies {
		implementation project(':nonLibrary-HelloWorld')
		implementation project(':nonLibrary-school')
		implementation project(':nonLibrary-tests')
	}
	jar.from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	jar.manifest.attributes("Main-Class": "com.Ace009.nonLibrary.debug.MainMethods")
}
//root dependencies
dependencies {
	implementation project(':library-general')
	implementation project(':library-CoordinateSystem')
	implementation project(':library-CClass')
	implementation project(':library-Math')
	implementation project(':nonLibrary-HelloWorld')
	implementation project(':nonLibrary-school')
	implementation project(':nonLibrary-tests')
}
//main jar
jar {
	archiveFileName = "${project.archivesBaseName}-${project.getVersion()}.jar"
	from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	duplicatesStrategy = 'exclude'
	destinationDirectory.set(file("./build/libs"))
}
//set main classpath
sourceSets {
	main.java {
		srcDirs=[
			file("./src/java/library-general/"),
			file("./src/java/library-CClass/"),
			file("./src/java/library-CoordinateSystem/"),
			file("./src/java/library-Math/"),
			file("./src/java/nonLibrary-HelloWorld/"),
			file("./src/java/nonLibrary-school/"),
			file("./src/java/nonLibrary-tests/")
		]
	}
}
//configure root
compileJava.onlyIf { false }
processResources.onlyIf { false }
buildDir="./build/"
//configure build scan (--scan)
if (hasProperty('buildScan')) {
	buildScan {
		tag "Java-Playground"
		tag "v"+project.getVersion()
		link "github dev-branch", "https://github.com/Zapdos333/Java-Playground/tree/dev"
	}
}
//configure javadocs
javadoc {
	destinationDir=file("${project.getRootDir()}/build/docs")
	source = project.getRootProject().sourceSets.main.java.srcDirs
	options.memberLevel = JavadocMemberLevel.PRIVATE
}
task packageDocs(type: Zip) {
	dependsOn javadoc
	archiveFileName="${project.archivesBaseName}-JavaDocs-${project.getVersion()}.zip"
	destinationDirectory=file("${project.getRootDir()}/build/libs")
	from file("${project.getRootDir()}/build/docs")
	entryCompression = "deflated"
}
build.dependsOn packageDocs
//debug
task printCheck(){
	doLast{
		println()
	}
}
